// 练习：打印 2-100 以内的素数（只能被1和本身整除）
/*
分析：
	2,3,5,7,11,13,17...
	以上这些数都是素数，怎么将它们从中取出呢？
	以 7 为例：用比 7 小的数去除 7 ：2,3,4,5,6
	以 8 为例：用比 8 小的数去除 8 ：2,3,4,5,6,7
	以 9 为例：用比 9 小的数去除 9 ：2,3,4,5,6,7,8
	以此类推...
	即：当用比某个数小的所有整数去除这个数，所有的结果“取余”都不为零，那么这个数就是素数
*/
package main

import (
	"fmt"
	"math"
)

func main() {
	for i := 2; i <= 100; i++ {
		flag := true // 记录 i 是否为素数
		// for j := 2; j < i; j++ { // 正常代码：j 的值判断到根号 i-1
		for j := 2; j <= int(math.Sqrt(float64(i))); j++ { // 优化代码：j 的值判断到根号 i 即可，不需要到 i-1
			if i%j == 0 {
				flag = false // 能被整除，说明不是素数了
				break        // 一旦 j 的值满足 i%j == 0 ，就不需要再尝试后面的整数了
			}
		}
		if flag { // flag 默认等于 true
			fmt.Println(i)
		}
	}
}
